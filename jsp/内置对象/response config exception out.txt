1.reponse:
  
  a.代表对客户端的响应，通常out对象可以完成对客户端的输出，但是out是Writer对象，即字符流，如果需要输出二进制流（图片、PDF等）还是需要借助于response

  b.其本质是HttpServletResponse对象

  c.获取响应字节流：ServletOutputStream getOutputStream();

  d.重定向：void sendRedirect(String location);   // 例如，response.sendRedirect("redirect.jsp");
    i.将请求重定向到另一个页面
    ii.和forward的区别是，重定向将产生一个新的请求，前一个请求会丢失，并且浏览器地址栏的地址也会变成新页面的地址！！

  e.Cookie：
    i.session将通信记录保存在服务器端，而Cookie则保存在客户端浏览器中
    ii.Cookie通过response设置，即服务器产生Cookie给浏览器，浏览器下次请求会把Cookie在发给服务器加以利用（通常保存登陆信息、密码等方便用户快速登陆等）
    iii.Cookie使用流程：

服务器端第一次产生Cookie给浏览器：
Cookie c_name = new Cookie("name", "Peter");  #一个Cookie只能保存一对键值，并且值只能是String类型的
Cookie c_passwd = new Cookie("passwd", "123");
c.setMaxAge(24 * 3600);  #必须设置Cookie的生存时长（这里是24小时），单位是秒，如果不设置，则默认浏览器断开连接就销毁（和session一样了）
response.addCookie(c_name);  #最后加入到response中即可，会自动发送给浏览器的
response.addCookie(c_passwd);

下次浏览器请求时可以从request中取出Cookie：
Cookie[] cookies = request.getCookies();
for (Cookie c: cookies) {
    ... c.getName() ...
    ... c.getValue() ...
}

！！Cookie不允许出现非西欧字符，如果要强行使用，则必须使用URLEncoder和URLDecoder进行编解码


2.config:

  a.是JSP页面的配置信息，即ServletConfig对象，config对象通常在JSP页面中使用较少，JSP页面通常不需要怎么配置

  b.如果需要配置JSP页面，则需要在web.xml中配置，并且要把JSP页面当成普通Servlet进行配置：
<servlet>
    <servlet-name>config</servlet-name>     #可以看到JSP页面当做Servlet进行配置
    <jsp-file>/configTest.jsp</jsp-file>    #和配置普通Servlet唯一不同的就是不是再指定.class文件了，而是指定jsp文件的路径（相对于应用程序环境根目录的）

    <init-param>                            #init-param就是ServletConfig的配置参数，也称为config初始参数，初始化一个Servlet时会读取到config对象中
        <param-name>name</param-name>
        <param-value>Peter</param-value>
    </init-param>
    <init-param>
        <param-name>age</param-name>
        <param-value>17</param-value>
    </init-param>
    ...
</servlet>

<servlet-mapping>                           #映射模式别忘了，因为就是在部署普通的Servlet
    <servlet-name>config</servlet-name>
    <url-pattern>/config</url-pattern>
</servlet-mapping>

  c.通过config获取JSP配置参数：String getInitParameter(String paramName);
！！注意：如果想通过该方法获取配置参数，则浏览器的URL地址必须使用JSP的web.xml配置路径来访问，即/config而不能是/configTest.jsp
！！否则getInitParameter得到的参数值都将是null


3.exception：

  a.该对象只在异常处理页面中有效（@page isErrorPage="true"），表示其它页面抛出的异常

  b.常用方法：
    i.Class<?> getClass();   // 返回异常的Java类型
    ii.String getMessage();  // 返回具体的异常描述信息


4.out：

  a.即页面输出流，所有JSP画面显示其实都是out.write方法在输出

  b.当然，如果出现write解决不了的问题，则可以使用out更加丰富的输出功能，例如out.println、out.printf等等

1.Filter介绍：

  a.是一种高级的Servlet：javax.servlet.Filter

  b.虽然他是Servlet的扩展，但是通常不用它来作为Servlet，而是过滤器

  c.Filter的主要作用：过滤信息
    i.拦截用户请求，对请求进行预处理（修改header、请求参数、设置编码等），之后再交给具体的Servlet处理
    ii.在响应输出给用户之前对相应进行一些处理（转换编码、修改header、参数等）
！！Filter的其它常见作用：
    iii.代码复用：将所有Servlet中通用（相同的）处理代码都抽象到Filter中，可以减少Servlet的代码量
    iv.测试：讲一些测试代码（比如测量程序运行时长等）放入Filter中方便项目的开发


2.Filter开发：

  a.过滤器必须要实现Filter接口（实现init、destroy和doFilter三个方法）：

package com.lirx.taglib;

import java.io.IOException;
import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.annotation.WebFilter;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

@WebFilter(filterName="log", urlPatterns={"/*"})  // Annotation部署Filter，指定Filter在Web容器中的名称，以及过滤目标Servlet的URL模式
public class LogFilter implements Filter {

	private FilterConfig config;  // 一般需要自定义一个过滤器配置对象，用于在init中读取配置信息
	
    public LogFilter() { }  // 和Servlet一样，构造器不需要实现，初始化在init中进行

	public void init(FilterConfig fConfig) throws ServletException {  // 配置通过参数传入，如果自己内部不准备一个config对象保存那么过了init配置信息就会丢失
		this.config = fConfig;
	}
	
	public void destroy() {  // 正常销毁，通常用于销毁数据库连接资源等Java虚拟机无法自行销毁的内容
		this.config = null;
	}

	// 实现过滤的主要方法
	// request/reponse就是该过滤器拦截到的请求/响应，过滤的就是它们俩
	// chain是过滤链，由于一个请求/相应可以被多个过滤器连续过滤，因此chain中就保存了所有可以过滤该请求/相应的过滤器句柄
	  // 链上的所有过滤器一次对该请求/响应进行连续的过滤
	public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
	// 过滤分4个步骤：
		/* 1.过滤request
		 * 2.将请求放行给chain中的下一个过滤器进行过滤
		 * 3.返回后过滤response
		 * 4.将过滤完毕的响应返回给客户端
		 * ！这是一个递归的过程，其中2.如果chain中没有其它过滤器了则直接放行给相应的Servlet进行服务了
		 */
		
		ServletContext application = config.getServletContext(); // 可以直接通过FilterConfig获取application句柄，并加以利用
		
		// 过滤request
		HttpServletRequest req = (HttpServletRequest)request;  // 将request强转成Http的，开始接下来的对request的过滤
		System.out.println(req.getServletPath()); // 这里只是简单地输出该过滤器拦截到的Servlet的URL模式
		long before = System.currentTimeMillis();  // 这里完成一个计时的功能
		
		// 放行到下一个过滤器，如果没有多余的过滤器则直接放给对应的Servlet处理
		chain.doFilter(request, response);
		
		// 过滤response
		long after = System.currentTimeMillis();
		HttpServletResponse res = (HttpServletResponse)response;  // 强转得到Http的response，接下来对response进行过滤
		// ...过滤代码省略
		System.out.println("Time consume: " + (after - before)); // 输出Servlet处理用时，测试性能
	}
}


3.配置Filter：

  a.Filter是一种高级的Servlet，Servlet都需要配置，Filter当然也需要配置咯！

  b.可以在Annotation中配置，或者在web.xml中配置，两者择其一
！web.xml中配置和Servlet类似，<web-app>大标签下，一个<filter>标签声明了一个过滤器，<filter-mapping>中则声明过滤器的URL模式（即过滤哪些URL特征的Servlet请求）
！Annotation中，则是在@WebFilter中配置

  c.常用配置：先web.xml后Annotation


Web容器中标识过滤器的名称（等同于<servlet-name>）：<filter-name>logFilter</filter-name>，往往需要同时指定其对应的Java类
<filter>
    <filter-name>logFilter</filter-name>
    <filter-class>com.lirx.filter.LogFilter</filter-class>
</filter>
Annotation：filterName="logFilter"
！！Annotation中无需配置filter-class了，因为类定义就是Annotation之后嘛！


FilterConfig的配置参数（初始化参数，和Servlet的初始化参数的意义一毛一样）:<init-param>
<init-param>
    <param-name>...
    <param-value>...
Annotation:initParams={@WebInitParam(name="xxx", value="xxx"), @WebInitparam(...}
！！使用的时候就是FilterConfig.getInitParameter(String name);


触发时机：<dispatcher>REQUEST | FORWARD | INCLUDE | ERROR | ASYNC</dispatcher>
Annotation:dispatcherTypes={type1, type2, ...} type为DispatcherType类的静态属性，REQUEST、FORWARD...和上面一样
默认是REQUEST，即只有当浏览器发出请求时才会触发过滤器，但有时需要在FORWARD、INCLUDE转发时也触发过滤器，甚至是跳转到错误页面以及异步处理时触发过滤器
该属性可以是以上5个值的组合，例如：
<dispatcher>REQUEST</disapatcher>
<dispatcher>FORWARD</disapatcher>
等价于：dispatcherTypes={DispatcherType.REQUEST, Dispatcher.FORWARD}

  d.最重要的配置信息：过滤器要过滤的Servlet的请求URL模式
    i.url-pattern：统配模式，可以使用正则表达式指定，只能指定一个
    ii.servlet-name:具体拦截某个Servlet的请求，可以指定多个
    iii.web.xml：
<filter-mapping>
    <filter-name>logFilter</filter-name>
    <url-pattern>/userinf-(\w*).do</url-pattern>   #可以使用正则表达式，必须以/开头，/*表示拦截所有URL
    <servlet-name>test_serv</servlet-name>  #具体拦截某个Servlet，可以有多个
    <servlet-name>test2_serv</servlet-name>
</filter-mapping>
    iv.Annotation：urlPatterns={"/userinf-(\w*).do"}, servletNames={"test_serv", "test2_serv"}


4.FilterChain中Filter的顺序：如果Filter配置中，刚好有多个Filter都满足某个URL，那么就会把所有满足条件的Filter按照在Web.xml中定义顺序逐个放入FilterChain中